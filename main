#!/usr/bin/env python3
import os
import sys
import subprocess
import filecmp
import datetime

default_sd  = '/dev/mmcblk0p1'
default_ssd = '/dev/disk/by-label/rohdaten'
default_in  = '/media/mmcblk'
default_out = '/media/rohdaten'

mounted_fs = []
find_extensions = ['wav', 'mts']

class MountError(Exception):
	def __init__(self, value):
		self.value = value
	def __str__(self):
		return repr(self.value)

def mount(dst, umount):
	if not umount and dst in mounted_fs:
		raise MountError("fs already mounted")
	elif umount and dst not in mounted_fs:
		raise MountError("fs not mounted")

	try:
		if not umount:
			subprocess.run(["mount", dst], check=True)
		else:
			subprocess.run(["umount", dst], check=True)
	except subprocess.CalledProcessError as e:
		print(e)
		exit(1)
	else:
		if not umount:
			mounted_fs.append(dst)
		else:
			mounted_fs.remove(dst)

def assert_s(condition, error):
	try:
		assert condition
	except AssertionError:
		print(error)
		exit(1)

def find_media_files(root, ext):
	rtn = []
	for (dirpath, dirnames, filenames) in os.walk(root):
		for file in filenames:
			for extension in ext:
				if file.lower().endswith(extension):
					rtn.append(os.path.join(dirpath, file))
					determine_subdirectory(os.path.join(dirpath, file))
	return rtn

def determine_subdirectory(file):
	t = os.stat(file).st_ctime
	return datetime.date.fromtimestamp(t).isoformat()

def copy_files(files):
	for file in files:
		print("{} goes into {}".format(file, os.path.join(default_out, event, determine_subdirectory(file))))

def empty_sd_card():
	files = find_media_files(default_in, find_extensions)
	copy_files(files)
	# remove_files()


assert_s((len(sys.argv) > 1), "Usage: {} [event]".format(sys.argv[0]))
event = sys.argv[1]

assert_s((os.path.exists(default_sd) and os.path.exists(default_ssd)), "SD card or ssd not connected!")
assert_s((os.path.exists(default_in) and os.path.exists(default_out)), "Source or target directory not found!")

print("mount directories")
mount(default_in, False)
mount(default_out, False)

print("current event: {}".format(event))

print("directories mounted")
try:
	empty_sd_card()
except Exception as e:
	print("zomg, something went wrong:\n{}".format(e))

print("umount directories")
mount(default_in, True)
mount(default_out, True)
